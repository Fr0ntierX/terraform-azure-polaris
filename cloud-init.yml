#cloud-config
package_update: true
package_upgrade: true
packages:
  - docker.io
  - jq
  - curl

write_files:
  - path: /etc/systemd/system/polaris-proxy.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Polaris Proxy
      Requires=docker.service tpm-token.service
      After=docker.service network-online.target tpm-token.service
      
      [Service]
      Environment="AZURE_CLIENT_ID=${managed_identity_client_id}"
      ExecStartPre=/usr/bin/docker-credential-acr login --identity ${managed_identity_client_id}
      ExecStart=/usr/bin/docker run \
        --name polaris-proxy \
        --network local-network \
        -p ${polaris_proxy_port}:${polaris_proxy_port} \
        -v /run/tpm_jwt_token:/run/container_launcher/attestation_verifier_claims_token \
        -e POLARIS_CONTAINER_WORKLOAD_BASE_URL=http://client-workload:${workload_port} \
        %{ if enable_kms }-e POLARIS_CONTAINER_KEY_TYPE=${key_type} \
        -e POLARIS_CONTAINER_AZURE_KEY_VAULT_NAME=${key_vault_name} \
        -e POLARIS_CONTAINER_AZURE_KEY_NAME=${key_name} \
        -e POLARIS_CONTAINER_AZURE_TENANT_ID=${tenant_id} \
        -e POLARIS_CONTAINER_AZURE_CLIENT_ID=${managed_identity_client_id} \
        -e POLARIS_CONTAINER_AZURE_ATTESTATION_URL=${attestation_provider_uri} %{ endif }\
        %{ if polaris_proxy_enable_input_encryption }-e POLARIS_CONTAINER_ENABLE_INPUT_ENCRYPTION=true %{ endif }\
        %{ if polaris_proxy_enable_output_encryption }-e POLARIS_CONTAINER_ENABLE_OUTPUT_ENCRYPTION=true %{ endif }\
        %{ if polaris_proxy_enable_cors }-e POLARIS_CONTAINER_ENABLE_CORS=true %{ endif }\
        %{ if polaris_proxy_enable_logging }-e POLARIS_CONTAINER_ENABLE_LOGGING=true %{ endif }\
        ${polaris_proxy_image}:${polaris_proxy_image_version}
      Restart=always
      RestartSec=30

  - path: /etc/systemd/system/client-workload.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Client Workload
      Requires=docker.service
      After=docker.service network-online.target
      
      [Service]
      ExecStartPre=/usr/bin/docker-credential-acr login --identity ${managed_identity_client_id}
      ExecStart=/usr/bin/docker run \
        --name client-workload \
        --network local-network \
        -p ${workload_port}:${workload_port} \
        %{ for key, value in workload_env_vars }
        -e ${key}=${value} \
        %{ endfor }
        ${workload_entrypoint != "" ? "--entrypoint ${workload_entrypoint}" : ""} \
        ${workload_image} \
        %{ for arg in workload_arguments }
        ${arg} \
        %{ endfor }
      Restart=always
      RestartSec=30

  - path: /etc/systemd/system/tpm-token.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Generate TPM JWT Token
      After=network.target
      
      [Service]
      ExecStart=/usr/local/bin/gotpm token --output /run/tpm_jwt_token
      Restart=on-failure

  - path: /etc/systemd/system/tpm-token.timer
    permissions: '0644'
    content: |
      [Unit]
      Description=Refresh TPM Token
      
      [Timer]
      OnBootSec=1min
      OnUnitActiveSec=50min
      
      [Install]
      WantedBy=timers.target

runcmd:
  - |
    # Configure Docker daemon
    mkdir -p /etc/docker
    echo '{"log-driver":"local","log-opts":{"max-size":"10m","max-file":"3"}}' > /etc/docker/daemon.json
    systemctl restart docker

    # Create network if not exists
    docker network inspect local-network || docker network create local-network
    
    # Install TPM tools
    curl -L https://github.com/Azure/azure-tpm-tools/releases/download/v0.1.0/tpm-tools-linux-amd64 -o /usr/local/bin/gotpm
    chmod +x /usr/local/bin/gotpm

    # Enable services
    systemctl daemon-reload
    systemctl enable polaris-proxy.service
    systemctl enable client-workload.service
    systemctl enable tpm-token.timer
    systemctl enable tpm-token.service
    systemctl start tpm-token.service
    systemctl start tpm-token.timer
    systemctl start polaris-proxy.service
    systemctl start client-workload.service

    # Diagnostic tools
    docker ps -a > /var/log/startup.log 2>&1
    journalctl -u polaris-proxy >> /var/log/startup.log 2>&1